{% set name = "abacus" %}
{% set version = "3.5.4" %}
{% set proc_type = "cuda" if cuda_compiler_version != "None" else "cpu" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  - url: https://github.com/deepmodeling/abacus-develop/archive/refs/tags/v{{ version }}.tar.gz
    sha256: ab7cbdd07a951da116cc4fe4dfa23e7ac41dda9f35c35d16c267920f267f4722
    patches:
      - 0001-rm-findlapack.patch
  - url: https://github.com/abacusmodeling/LibRI/archive/553c91c0be1d60a86e7666f0502ef866c366c600.tar.gz
    sha256: 2dfe49d8fa52091a651b2d29b962d67934888831578a9b5aa1c55f96dca382e5
    folder: deps/LibRI
  - url: https://github.com/abacusmodeling/LibComm/archive/refs/tags/v0.1.0.tar.gz
    sha256: 48899b9877bcddf3cc03e4e7323e38cfd802d756b7bafba58f151f81a3fa6ed4
    folder: deps/LibComm
  - url: https://github.com/wenfei-li/libpaw_interface/archive/9ba84653a6350ac296a1c516b39bae390a2f8210.tar.gz
    sha256: befaf44a4a5948459ed91b9af66df3727921af30fa6d6c7a8b1bc304eac85c9a
    folder: deps/libpaw_interface

build:
  script: |
    if [[ ${cuda_compiler_version} != "None" ]]; then
      export CMAKE_ARGS="-DUSE_CUDA=1 ${CMAKE_ARGS}"
    fi
    if [[ ${cuda_compiler_version} == 11.2 ]]; then
        export TORCH_CUDA_ARCH_LIST="3.5;5.0;6.0;6.1;7.0;7.5;8.0;8.6+PTX"
    elif [[ ${cuda_compiler_version} == 11.8 ]]; then
        export TORCH_CUDA_ARCH_LIST="3.5;5.0;6.0;6.1;7.0;7.5;8.0;8.6;8.9+PTX"
    elif [[ ${cuda_compiler_version} == 12.0 ]]; then
        export TORCH_CUDA_ARCH_LIST="5.0;6.0;6.1;7.0;7.5;8.0;8.6;8.9;9.0+PTX"
    elif [[ ${cuda_compiler_version} != "None" ]]; then
        echo "unsupported cuda version."
        exit 1
    fi
    export CUDAARCHS=all
    cmake -B conda_build ${CMAKE_ARGS} -DCMAKE_BUILD_TYPE=Release -DENABLE_DEEPKS=1 -DENABLE_LIBXC=1 -DENABLE_LIBRI=1 -DGIT_SUBMODULE=0 -DLIBRI_DIR=$SRC_DIR/deps/LibRI -DLIBCOMM_DIR=$SRC_DIR/deps/LibComm -DBLA_VENDOR=Generic
    cmake --build conda_build -j`nproc`
    cmake --install conda_build
  number: 0
  skip: true  # [not linux]
  # upstream is not ready
  skip: true  # [aarch64 and cuda_compiler_version != "None"]
  string: {{ proc_type }}_mpi_{{ mpi }}_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}

requirements:
  build:
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}  # [cuda_compiler_version != "None"]
    - make
    - cmake
    - llvm-openmp  # [osx]
    - libgomp      # [linux]

  host:
    - {{ mpi }}
    - libblas
    - liblapack
    - scalapack
    - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != "None"]
    - libcublas-dev    # [(cuda_compiler_version or "").startswith("12")]
    - libcusolver-dev  # [(cuda_compiler_version or "").startswith("12")]
    - libcufft-dev     # [(cuda_compiler_version or "").startswith("12")]
    - cuda-driver-dev  # [(cuda_compiler_version or "").startswith("12")]
    - cuda-nvrtc-dev   # [(cuda_compiler_version or "").startswith("12")]
    - cuda-nvtx-dev    # [(cuda_compiler_version or "").startswith("12")]
    - libcurand-dev    # [(cuda_compiler_version or "").startswith("12")]
    - cuda-cudart-dev  # [(cuda_compiler_version or "").startswith("12")]
    - elpa
    - elpa * mpi_{{ mpi }}_*
    - fftw
    - fftw * mpi_{{ mpi }}_*
    - cereal
    - libtorch
    - libtorch * {{ proc_type }}*
    - libxc-c
    - libxc-c * cpu_*

  run:
    - {{ mpi }}
    - libxc-c * cpu_*
    - scalapack
    - {{ pin_compatible('libtorch', max_pin='x.x') }} {{ proc_type }}*

test:
  commands:
    - export OMPI_MCA_plm=isolated OMPI_MCA_btl_vader_single_copy_mechanism=none OMPI_MCA_rmaps_base_oversubscribe=yes  # [mpi == "openmpi"]
    - abacus --version
    - mpirun -n 2 abacus --version  # [mpi == "mpich"]

about:
  home: https://abacus.ustc.edu.cn/
  doc_url: https://abacus.deepmodeling.com/
  dev_url: https://github.com/deepmodeling/abacus-develop
  license: LGPL-3.0-only AND MIT
  license_family: LGPL
  license_file:
    - LICENSE
    - libnpy.LICENSE
  summary: An electronic structure package based on plane wave and numerical atomic basis sets.
  description: >
    ABACUS (Atomic-orbital Based Ab-initio Computation at UStc) is an open-source package based on density functional theory (DFT). The package utilizes both plane wave and numerical atomic basis sets with the usage of norm-conserving pseudopotentials to describe the interactions between nuclear ions and valence electrons.
    ABACUS supports LDA, GGA, meta-GGA, and hybrid functionals. Apart from single-point calculations, the package allows geometry optimizations and ab-initio molecular dynamics with various ensembles.

extra:
  recipe-maintainers:
    - njzjz
    - caic99
