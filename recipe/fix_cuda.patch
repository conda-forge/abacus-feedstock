From fc1a936ea3aa6ff660b16800af3f98f1d9211e7e Mon Sep 17 00:00:00 2001
From: denghuilu <denghuilu@pku.edu.cn>
Date: Fri, 4 Aug 2023 10:50:36 +0800
Subject: [PATCH] add cuda arch 3.5 compilation support for ABACUS

---
 .../hamilt_pwdft/kernels/cuda/force_op.cu         |  1 +
 .../hamilt_pwdft/kernels/cuda/stress_op.cu        |  1 +
 source/module_psi/kernels/device.h                | 15 +++++++++++++++
 3 files changed, 17 insertions(+)

diff --git a/source/module_hamilt_pw/hamilt_pwdft/kernels/cuda/force_op.cu b/source/module_hamilt_pw/hamilt_pwdft/kernels/cuda/force_op.cu
index df5a73e8ed..9249fdaa1e 100644
--- a/source/module_hamilt_pw/hamilt_pwdft/kernels/cuda/force_op.cu
+++ b/source/module_hamilt_pw/hamilt_pwdft/kernels/cuda/force_op.cu
@@ -1,4 +1,5 @@
 #include "module_hamilt_pw/hamilt_pwdft/kernels/force_op.h"
+#include "module_psi/kernels/device.h"
 
 #include <complex>
 
diff --git a/source/module_hamilt_pw/hamilt_pwdft/kernels/cuda/stress_op.cu b/source/module_hamilt_pw/hamilt_pwdft/kernels/cuda/stress_op.cu
index 872d610019..6e30b7139f 100644
--- a/source/module_hamilt_pw/hamilt_pwdft/kernels/cuda/stress_op.cu
+++ b/source/module_hamilt_pw/hamilt_pwdft/kernels/cuda/stress_op.cu
@@ -1,4 +1,5 @@
 #include "module_hamilt_pw/hamilt_pwdft/kernels/stress_op.h"
+#include "module_psi/kernels/device.h"
 
 #include <complex>
 #include <thrust/complex.h>
diff --git a/source/module_psi/kernels/device.h b/source/module_psi/kernels/device.h
index 656b483e0c..4e75ca8a92 100644
--- a/source/module_psi/kernels/device.h
+++ b/source/module_psi/kernels/device.h
@@ -8,6 +8,21 @@
 #include <complex>
 #include <iostream>
 
+#if defined(__CUDA_ARCH__) && __CUDA_ARCH__ < 600
+static __inline__ __device__ double atomicAdd(double *address, double val) {
+  unsigned long long int *address_as_ull = (unsigned long long int *)address;
+  unsigned long long int old = *address_as_ull, assumed;
+  do {
+    assumed = old;
+    old = atomicCAS(address_as_ull, assumed,
+                    __double_as_longlong(val + __longlong_as_double(assumed)));
+    // Note: uses integer comparison to avoid hang in case of NaN (since NaN !=
+    // NaN) } while (assumed != old);
+  } while (assumed != old);
+  return __longlong_as_double(old);
+}
+#endif
+
 namespace psi {
 namespace device {
 
